{"ast":null,"code":"var _jsxFileName = \"/home/madhuripatil/workspace/hooksapp/src/components/secure.js\";\nimport React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nimport axios from \"axios\";\nimport store from \"../utils/store\";\nimport { notification } from 'antd'; // import { updateUserInfo, getUserInfo } from \"../actions/user\";\n// import { Provider } from \"react-redux\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst kc = Keycloak('/keycloak.json'); // axios.interceptors.request.use(config => {\n// \tconst st = store.getState();\n// \tconfig.headers = Object.assign({}, config.headers, {\n// \t\t'Content-Type': 'application/json',\n//     \"Access-Control-Allow-Origin\": \"*\",\n// \t\tAccept: 'application/json',\n// \t\tAuthorization: 'Bearer ' + kc.token,\n// \t\t// Provider: 'keycloak',\n// \t});\n// \treturn config;\n// });\n// axios.interceptors.response.use((response) => {\n// \t// Do something with response data\n// \treturn response;\n// }, (error) => {\n// \t// Do something with response error\n// \tif (error.response.status === 401) {\n// \t\tconst NOTIFICATION_DURATION = parseInt(5);\n// \t\tnotification.error({\n// \t\t\tmessage: \"Session timeout\",\n// \t\t\tdescription: `Your session has been expired. Please refresh the page and try again.`,\n// \t\t\tduration: NOTIFICATION_DURATION\n// \t\t});\n// \t\tkc.redirectUri = \"http://localhost:3000/\";\n// \t\tkc.logout();\n// \t}\n// \treturn error;\n// })\n\nclass Secured extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keycloak: null,\n      authenticated: false\n    };\n  }\n\n  componentDidMount() {\n    // const keycloak = Keycloak('/keycloak.json');\n    kc.init({\n      onLoad: \"check-sso\",\n      checkLoginIframe: false\n    }).success(authenticated => {\n      if (authenticated) {\n        if (kc.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n          console.log(kc.tokenParsed, kc); // store.dispatch(updateUserInfo(kc.tokenParsed, kc));    \n\n          this.setState({\n            keycloak: kc,\n            authenticated: authenticated\n          });\n        } else {\n          kc.logout();\n        }\n      } else {\n        kc.login();\n      }\n    });\n  }\n\n  render() {\n    console.log(this.state.keycloak, this.state.authenticated);\n\n    if (this.state.keycloak) {\n      if (this.state.authenticated) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is a Keycloak-secured component of your application. You shouldn't be able to see this unless you've authenticated with Keycloak.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Unable to authenticate!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Initializing Keycloak...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Secured;","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/components/secure.js"],"names":["React","Component","Keycloak","axios","store","notification","kc","Secured","constructor","props","state","keycloak","authenticated","componentDidMount","init","onLoad","checkLoginIframe","success","realmAccess","roles","indexOf","console","log","tokenParsed","setState","logout","login","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,YAAR,QAA2B,MAA3B,C,CACA;AACA;;;AACA,MAAMC,EAAE,GAAGJ,QAAQ,CAAC,gBAAD,CAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,OAAN,SAAsBN,SAAtB,CAAgC;AAE9BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,aAAa,EAAE;AAAjC,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACAP,IAAAA,EAAE,CAACQ,IAAH,CAAQ;AAAEC,MAAAA,MAAM,EAAE,WAAV;AAAuBC,MAAAA,gBAAgB,EAAE;AAAzC,KAAR,EAA0DC,OAA1D,CAAkEL,aAAa,IAAI;AACjF,UAAIA,aAAJ,EAAmB;AACjB,YAAIN,EAAE,CAACY,WAAH,CAAeC,KAAf,CAAqBC,OAArB,CAA6B,YAA7B,MAA+C,CAAC,CAApD,EAAuD;AACrDC,UAAAA,OAAO,CAACC,GAAR,CAAYhB,EAAE,CAACiB,WAAf,EAA2BjB,EAA3B,EADqD,CAErD;;AACA,eAAKkB,QAAL,CAAc;AAAEb,YAAAA,QAAQ,EAAEL,EAAZ;AAAgBM,YAAAA,aAAa,EAAEA;AAA/B,WAAd;AACD,SAJD,MAIO;AACLN,UAAAA,EAAE,CAACmB,MAAH;AACD;AACF,OARD,MAQO;AACLnB,QAAAA,EAAE,CAACoB,KAAH;AACD;AACF,KAZD;AAcD;;AAEDC,EAAAA,MAAM,GAAG;AACPN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWC,QAAvB,EAAiC,KAAKD,KAAL,CAAWE,aAA5C;;AACA,QAAI,KAAKF,KAAL,CAAWC,QAAf,EAAyB;AACvB,UAAI,KAAKD,KAAL,CAAWE,aAAf,EAA8B,oBAC5B;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAD4B,CAA9B,KAKQ,oBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AACT;;AACD,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAtC6B;;AAwChC,eAAeL,OAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nimport axios from \"axios\";\nimport store from \"../utils/store\";\nimport {notification} from 'antd';\n// import { updateUserInfo, getUserInfo } from \"../actions/user\";\n// import { Provider } from \"react-redux\";\nconst kc = Keycloak('/keycloak.json');\n\n// axios.interceptors.request.use(config => {\n// \tconst st = store.getState();\n// \tconfig.headers = Object.assign({}, config.headers, {\n// \t\t'Content-Type': 'application/json',\n//     \"Access-Control-Allow-Origin\": \"*\",\n// \t\tAccept: 'application/json',\n// \t\tAuthorization: 'Bearer ' + kc.token,\n// \t\t// Provider: 'keycloak',\n// \t});\n// \treturn config;\n// });\n\n// axios.interceptors.response.use((response) => {\n// \t// Do something with response data\n// \treturn response;\n// }, (error) => {\n// \t// Do something with response error\n// \tif (error.response.status === 401) {\n// \t\tconst NOTIFICATION_DURATION = parseInt(5);\n// \t\tnotification.error({\n// \t\t\tmessage: \"Session timeout\",\n// \t\t\tdescription: `Your session has been expired. Please refresh the page and try again.`,\n// \t\t\tduration: NOTIFICATION_DURATION\n// \t\t});\n// \t\tkc.redirectUri = \"http://localhost:3000/\";\n// \t\tkc.logout();\n// \t}\n// \treturn error;\n// })\nclass Secured extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { keycloak: null, authenticated: false };\n  }\n\n  componentDidMount() {\n    // const keycloak = Keycloak('/keycloak.json');\n    kc.init({ onLoad: \"check-sso\", checkLoginIframe: false }).success(authenticated => {\n      if (authenticated) {\n        if (kc.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n          console.log(kc.tokenParsed,kc)\n          // store.dispatch(updateUserInfo(kc.tokenParsed, kc));    \n          this.setState({ keycloak: kc, authenticated: authenticated })\n        } else {\n          kc.logout();\n        }\n      } else {\n        kc.login();\n      }\n    });\n\n  }\n\n  render() {\n    console.log(this.state.keycloak, this.state.authenticated)\n    if (this.state.keycloak) {\n      if (this.state.authenticated) return (\n        <div>\n          <p>This is a Keycloak-secured component of your application. You shouldn't be able\n            to see this unless you've authenticated with Keycloak.</p>\n        </div>\n      ); else return (<div>Unable to authenticate!</div>)\n    }\n    return (\n      <div>Initializing Keycloak...</div>\n    );\n  }\n}\nexport default Secured;\n"]},"metadata":{},"sourceType":"module"}