{"ast":null,"code":"import axios from'axios';import{SET_GLOBAL_DATA}from'../../constants/actionTypes';import{notification}from'antd';var baseURL=process.env.REACT_APP_API_HOST;var successStatusCode=parseInt(process.env.REACT_APP_SUCCESS_STATUS_CODE);var duration=parseInt(process.env.REACT_APP_NOTIFICATION_DURATION);export function setGlobalData(content){return{type:SET_GLOBAL_DATA,content:content};}export function getLanguageList(){var config={headers:{locale:'en'}};return function(dispatch){return axios.get(baseURL+'api/notification/get-notification-language-list',config).then(function(response){if(response.data.status===successStatusCode){dispatch(setGlobalData({languageList:response.data.body}));}else{notification.error({message:'Error',description:response.data.message,duration:duration});}}).catch(function(error){console.log(error);});};}export function getUserInfo(email){var config={headers:{email:email}};return function(dispatch){return axios.get(baseURL+'api/user/single-user',config).then(function(response){if(response.data.status===successStatusCode){dispatch(setGlobalData({userId:response.data.body.id,userName:response.data.body.userName,userRole:response.data.body.userRole,preferredUserName:response.data.body.preferredUserName}));}else{notification.error({message:'Error',description:response.data.message,duration:duration});}}).catch(function(error){console.log(error);});};}export function updateUserInfo(obj,keycloak){return function(dispatch){dispatch(setGlobalData({emailId:obj.email,keycloak:keycloak}));};}export function updateGlobalData(obj){return function(dispatch){dispatch(setGlobalData(obj));};}","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/redux/actions/global.js"],"names":["axios","SET_GLOBAL_DATA","notification","baseURL","process","env","REACT_APP_API_HOST","successStatusCode","parseInt","REACT_APP_SUCCESS_STATUS_CODE","duration","REACT_APP_NOTIFICATION_DURATION","setGlobalData","content","type","getLanguageList","config","headers","locale","dispatch","get","then","response","data","status","languageList","body","error","message","description","catch","console","log","getUserInfo","email","userId","id","userName","userRole","preferredUserName","updateUserInfo","obj","keycloak","emailId","updateGlobalData"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { SET_GLOBAL_DATA } from '../../constants/actionTypes';\nimport { notification } from 'antd';\n\nconst baseURL = process.env.REACT_APP_API_HOST;\nconst successStatusCode = parseInt(process.env.REACT_APP_SUCCESS_STATUS_CODE);\nconst duration = parseInt(process.env.REACT_APP_NOTIFICATION_DURATION);\n\nexport function setGlobalData(content) {\n  return {\n    type: SET_GLOBAL_DATA,\n    content,\n  };\n}\n\nexport function getLanguageList() {\n  const config = {\n    headers: { locale: 'en' }\n  };\n  return (dispatch) => {\n    return axios.get(baseURL + 'api/notification/get-notification-language-list', config).then((response) => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          languageList: response.data.body\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch((error) => {\n      console.log(error);\n    });\n  };\n}\n\nexport function getUserInfo(email) {\n  const config = {\n    headers: { email: email }\n  };\n  return (dispatch) => {\n    return axios.get(baseURL + 'api/user/single-user', config).then((response) => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          userId: response.data.body.id,\n          userName: response.data.body.userName,\n          userRole: response.data.body.userRole,\n          preferredUserName: response.data.body.preferredUserName\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch((error) => {\n      console.log(error);\n    });\n  };\n}\n\nexport function updateUserInfo(obj, keycloak) {\n  return (dispatch) => {\n    dispatch(setGlobalData({\n      emailId: obj.email,\n      keycloak: keycloak\n    }));\n  };\n}\n\nexport function updateGlobalData(obj) {\n  return (dispatch) => {\n    dispatch(setGlobalData(obj));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}