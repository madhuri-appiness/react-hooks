{"ast":null,"code":"// import React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nconst kc = new Keycloak('/keycloak.json');\n\nconst initKeycloak = onAuthenticatedCallback => {\n  kc.init({\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(authenticated => {\n    if (authenticated) {\n      onAuthenticatedCallback();\n    } else {\n      console.log(\"not authenticated\");\n      doLogin();\n    }\n  });\n};\n\nconst doLogin = kc.login;\nconst doLogout = kc.logout;\n\nconst getToken = () => kc.token;\n\nconst updateToken = successCallback => {\n  kc.updateToken(5).then(successCallback).catch(doLogin);\n}; // const getUsername = ()=> kc.tokenParsed ? \n// class Secured extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { keycloak: null, authenticated: false };\n//     }\n//     componentDidMount() {\n//         console.log('hi',this.state.keycloak)\n//         const keycloak = Keycloak('/keycloak.json');\n//     //     const keycloak = Keycloak({\n//     //         \"realm\": \"AMGEN_SSO\",\n//     // \"auth-server-url\": \"http://192.0.0.220:8080/auth/\",\n//     // \"realm-public-key\": \"7dab529b-95e0-4087-8091-f592f613c195\",\n//     // \"ssl-required\": \"external\",\n//     // \"resource\": \"non-amgen\",\n//     // \"public-client\": true,\n//     // \"use-resource-role-mappings\": false,\n//     // \"confidential-port\": 0\n//     //     });\n//         keycloak.init({ onLoad: 'login-required' }).then(authenticated => {\n//             this.setState({ keycloak: keycloak, authenticated: authenticated })\n//         })\n//     }\n//     render() {\n//         if (this.state.keycloak) {\n//             if (this.state.authenticated) return (\n//                 <div>\n//                     <p>This is a Keycloak-secured component of your application. You shouldn't be able\n//                         to see this unless you've authenticated with Keycloak.</p>\n//                 </div>\n//             ); else return (<div>Unable to authenticate!</div>)\n//         }\n//         return (\n//             <div>Initializing Keycloak...</div>\n//         );\n//     }\n// }\n// export default Secured;","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/services/secured.js"],"names":["Keycloak","kc","initKeycloak","onAuthenticatedCallback","init","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","console","log","doLogin","login","doLogout","logout","getToken","token","updateToken","successCallback","catch"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,aAArB;AAEA,MAAMC,EAAE,GAAG,IAAID,QAAJ,CAAa,gBAAb,CAAX;;AAEA,MAAME,YAAY,GAAIC,uBAAD,IAA4B;AAC7CF,EAAAA,EAAE,CAACG,IAAH,CAAQ;AACAC,IAAAA,MAAM,EAAC,WADP;AAEAC,IAAAA,yBAAyB,EAACC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,wBAFnD;AAGAC,IAAAA,UAAU,EAAC;AAHX,GAAR,EAIOC,IAJP,CAIaC,aAAD,IAAiB;AACrB,QAAGA,aAAH,EAAiB;AACbT,MAAAA,uBAAuB;AAC1B,KAFD,MAEK;AACDU,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,MAAAA,OAAO;AACV;AACJ,GAXL;AAYH,CAbD;;AAcA,MAAMA,OAAO,GAAGd,EAAE,CAACe,KAAnB;AACA,MAAMC,QAAQ,GAAGhB,EAAE,CAACiB,MAApB;;AACA,MAAMC,QAAQ,GAAG,MAAMlB,EAAE,CAACmB,KAA1B;;AAEA,MAAMC,WAAW,GAAIC,eAAD,IAAmB;AACnCrB,EAAAA,EAAE,CAACoB,WAAH,CAAe,CAAf,EAAkBV,IAAlB,CAAuBW,eAAvB,EACCC,KADD,CACOR,OADP;AAEH,CAHD,C,CAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\n\nconst kc = new Keycloak('/keycloak.json');\n\nconst initKeycloak = (onAuthenticatedCallback) =>{\n    kc.init({\n            onLoad:'check-sso',\n            silentCheckSsoRedirectUri:window.location.origin + '/silent-check-sso.html',\n            pkceMethod:'S256'\n        }).then((authenticated)=>{\n            if(authenticated){\n                onAuthenticatedCallback();\n            }else{\n                console.log(\"not authenticated\");\n                doLogin();\n            }\n        })\n}\nconst doLogin = kc.login;\nconst doLogout = kc.logout;\nconst getToken = () => kc.token;\n\nconst updateToken = (successCallback)=>{\n    kc.updateToken(5).then(successCallback)\n    .catch(doLogin);\n}\n\n// const getUsername = ()=> kc.tokenParsed ? \n\n// class Secured extends Component {\n\n//     constructor(props) {\n//         super(props);\n//         this.state = { keycloak: null, authenticated: false };\n//     }\n\n//     componentDidMount() {\n//         console.log('hi',this.state.keycloak)\n\n//         const keycloak = Keycloak('/keycloak.json');\n//     //     const keycloak = Keycloak({\n//     //         \"realm\": \"AMGEN_SSO\",\n//     // \"auth-server-url\": \"http://192.0.0.220:8080/auth/\",\n//     // \"realm-public-key\": \"7dab529b-95e0-4087-8091-f592f613c195\",\n//     // \"ssl-required\": \"external\",\n//     // \"resource\": \"non-amgen\",\n//     // \"public-client\": true,\n//     // \"use-resource-role-mappings\": false,\n//     // \"confidential-port\": 0\n\n//     //     });\n//         keycloak.init({ onLoad: 'login-required' }).then(authenticated => {\n//             this.setState({ keycloak: keycloak, authenticated: authenticated })\n//         })\n//     }\n\n//     render() {\n//         if (this.state.keycloak) {\n//             if (this.state.authenticated) return (\n//                 <div>\n//                     <p>This is a Keycloak-secured component of your application. You shouldn't be able\n//                         to see this unless you've authenticated with Keycloak.</p>\n//                 </div>\n//             ); else return (<div>Unable to authenticate!</div>)\n//         }\n//         return (\n//             <div>Initializing Keycloak...</div>\n//         );\n//     }\n// }\n// export default Secured;"]},"metadata":{},"sourceType":"module"}