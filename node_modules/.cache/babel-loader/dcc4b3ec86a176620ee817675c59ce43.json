{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom';import'./index.css';import App from'./App';import reportWebVitals from'./reportWebVitals';import Keycloak from'keycloak-js';import axios from\"axios\";import store from\"./utils/store\";import{updateUserInfo}from\"./redux/actions/global\";import{Router,Routes}from'react-router-dom';import history from\"./utils/history\";import{Provider}from\"react-redux\";import{jsx as _jsx}from\"react/jsx-runtime\";var kc=Keycloak(\"/keycloak.json\");var render=function render(){ReactDOM.render(/*#__PURE__*/ // Wrap Provider inside AppContainer\n_jsx(Provider,{store:store,children:/*#__PURE__*/_jsx(Router,{history:history,children:/*#__PURE__*/_jsx(Routes,{children:/*#__PURE__*/_jsx(App,{})})})}),document.getElementById('app'));};kc.init({onLoad:\"check-sso\",checkLoginIframe:false}).success(function(authenticated){if(authenticated){if(kc.realmAccess.roles.indexOf('ROLE_ADMIN')!==-1){store.dispatch(updateUserInfo(kc.tokenParsed,kc));render();}else{kc.logout();}}else{kc.login();}});axios.interceptors.request.use(function(config){config.headers=Object.assign({},config.headers,{'Content-Type':'application/json',Accept:'application/json',Authorization:'Bearer '+kc.token});return config;});axios.interceptors.response.use(function(response){// Do something with response data\nreturn response;},function(error){// Do something with response error\nif(error.response.status===401){kc.redirectUri=process.env.REACT_APP_REDIRECT_URI;kc.logout();}return error;});// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","Keycloak","axios","store","updateUserInfo","Router","Routes","history","Provider","kc","render","document","getElementById","init","onLoad","checkLoginIframe","success","authenticated","realmAccess","roles","indexOf","dispatch","tokenParsed","logout","login","interceptors","request","use","config","headers","Object","assign","Accept","Authorization","token","response","error","status","redirectUri","process","env","REACT_APP_REDIRECT_URI"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,eAAlB,CACA,OAASC,cAAT,KAA+B,wBAA/B,CACA,OAASC,MAAT,CAAiBC,MAAjB,KAA+B,kBAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,iBAApB,CACA,OAASC,QAAT,KAAyB,aAAzB,C,2CAGA,GAAMC,CAAAA,EAAE,CAAGR,QAAQ,kBAAnB,CAEA,GAAMS,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjBZ,QAAQ,CAACY,MAAT,eACI;AACA,KAAC,QAAD,EAAU,KAAK,CAAEP,KAAjB,uBACI,KAAC,MAAD,EAAQ,OAAO,CAAEI,OAAjB,uBACI,KAAC,MAAD,wBACI,KAAC,GAAD,IADJ,EADJ,EADJ,EAFJ,CASII,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CATJ,EAWH,CAZD,CAcAH,EAAE,CAACI,IAAH,CAAQ,CAAEC,MAAM,CAAE,WAAV,CAAuBC,gBAAgB,CAAE,KAAzC,CAAR,EAA0DC,OAA1D,CAAkE,SAAAC,aAAa,CAAI,CAC/E,GAAIA,aAAJ,CAAmB,CACf,GAAIR,EAAE,CAACS,WAAH,CAAeC,KAAf,CAAqBC,OAArB,CAA6B,YAA7B,IAA+C,CAAC,CAApD,CAAuD,CACnDjB,KAAK,CAACkB,QAAN,CAAejB,cAAc,CAACK,EAAE,CAACa,WAAJ,CAAiBb,EAAjB,CAA7B,EACAC,MAAM,GACT,CAHD,IAGO,CACHD,EAAE,CAACc,MAAH,GACH,CACJ,CAPD,IAOO,CACHd,EAAE,CAACe,KAAH,GACH,CACJ,CAXD,EAaAtB,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,SAAAC,MAAM,CAAI,CACrCA,MAAM,CAACC,OAAP,CAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBH,MAAM,CAACC,OAAzB,CAAkC,CAC/C,eAAgB,kBAD+B,CAE/CG,MAAM,CAAE,kBAFuC,CAG/CC,aAAa,CAAE,UAAYxB,EAAE,CAACyB,KAHiB,CAAlC,CAAjB,CAKA,MAAON,CAAAA,MAAP,CACH,CAPD,EASA1B,KAAK,CAACuB,YAAN,CAAmBU,QAAnB,CAA4BR,GAA5B,CAAgC,SAACQ,QAAD,CAAc,CAC1C;AACA,MAAOA,CAAAA,QAAP,CACH,CAHD,CAGG,SAACC,KAAD,CAAW,CACV;AACA,GAAIA,KAAK,CAACD,QAAN,CAAeE,MAAf,GAA0B,GAA9B,CAAmC,CAC/B5B,EAAE,CAAC6B,WAAH,CAAiBC,OAAO,CAACC,GAAR,CAAYC,sBAA7B,CACAhC,EAAE,CAACc,MAAH,GACH,CACD,MAAOa,CAAAA,KAAP,CACH,CAVD,EAYA;AACA;AACA;AACApC,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Keycloak from 'keycloak-js';\nimport axios from \"axios\";\nimport store from \"./utils/store\";\nimport { updateUserInfo } from \"./redux/actions/global\";\nimport { Router, Routes } from 'react-router-dom';\nimport history from \"./utils/history\";\nimport { Provider } from \"react-redux\";\n\n\nconst kc = Keycloak(`/keycloak.json`);\n\nconst render = () => {\n    ReactDOM.render(\n        // Wrap Provider inside AppContainer\n        <Provider store={store}>\n            <Router history={history}>\n                <Routes>\n                    <App />\n                </Routes>\n            </Router>\n        </Provider>,\n        document.getElementById('app')\n    );\n};\n\nkc.init({ onLoad: \"check-sso\", checkLoginIframe: false }).success(authenticated => {\n    if (authenticated) {\n        if (kc.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n            store.dispatch(updateUserInfo(kc.tokenParsed, kc));    \n            render();\n        } else {\n            kc.logout();\n        }\n    } else {\n        kc.login();\n    }\n});\n\naxios.interceptors.request.use(config => {\n    config.headers = Object.assign({}, config.headers, {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer ' + kc.token\n    });\n    return config;\n});\n\naxios.interceptors.response.use((response) => {\n    // Do something with response data\n    return response;\n}, (error) => {\n    // Do something with response error\n    if (error.response.status === 401) {\n        kc.redirectUri = process.env.REACT_APP_REDIRECT_URI;\n        kc.logout();\n    }\n    return error;\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}