{"ast":null,"code":"import axios from 'axios';\nimport { SET_GLOBAL_DATA } from '../../constants/actionTypes';\nimport { notification } from 'antd';\nconst baseURL = process.env.REACT_APP_API_HOST;\nconst successStatusCode = parseInt(process.env.REACT_APP_SUCCESS_STATUS_CODE);\nconst duration = parseInt(process.env.REACT_APP_NOTIFICATION_DURATION);\nexport function setGlobalData(content) {\n  return {\n    type: SET_GLOBAL_DATA,\n    content\n  };\n}\nexport function getLanguageList() {\n  const config = {\n    headers: {\n      locale: 'en'\n    }\n  };\n  return dispatch => {\n    return axios.get(baseURL + 'api/notification/get-notification-language-list', config).then(response => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          languageList: response.data.body\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function getUserInfo(email) {\n  const config = {\n    headers: {\n      email: email\n    }\n  };\n  return dispatch => {\n    return axios.get(baseURL + 'api/user/single-user', config).then(response => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          userId: response.data.body.id,\n          userName: response.data.body.userName,\n          userRole: response.data.body.userRole,\n          preferredUserName: response.data.body.preferredUserName\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function updateUserInfo(obj, keycloak) {\n  return dispatch => {\n    dispatch(setGlobalData({\n      emailId: obj.email,\n      keycloak: keycloak\n    }));\n  };\n}\nexport function updateGlobalData(obj) {\n  return dispatch => {\n    dispatch(setGlobalData(obj));\n  };\n}","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/redux/actions/global.js"],"names":["axios","SET_GLOBAL_DATA","notification","baseURL","process","env","REACT_APP_API_HOST","successStatusCode","parseInt","REACT_APP_SUCCESS_STATUS_CODE","duration","REACT_APP_NOTIFICATION_DURATION","setGlobalData","content","type","getLanguageList","config","headers","locale","dispatch","get","then","response","data","status","languageList","body","error","message","description","catch","console","log","getUserInfo","email","userId","id","userName","userRole","preferredUserName","updateUserInfo","obj","keycloak","emailId","updateGlobalData"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { SET_GLOBAL_DATA } from '../../constants/actionTypes';\nimport { notification } from 'antd';\n\nconst baseURL = process.env.REACT_APP_API_HOST;\nconst successStatusCode = parseInt(process.env.REACT_APP_SUCCESS_STATUS_CODE);\nconst duration = parseInt(process.env.REACT_APP_NOTIFICATION_DURATION);\n\nexport function setGlobalData(content) {\n  return {\n    type: SET_GLOBAL_DATA,\n    content,\n  };\n}\n\nexport function getLanguageList() {\n  const config = {\n    headers: { locale: 'en' }\n  };\n  return (dispatch) => {\n    return axios.get(baseURL + 'api/notification/get-notification-language-list', config).then((response) => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          languageList: response.data.body\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch((error) => {\n      console.log(error);\n    });\n  };\n}\n\nexport function getUserInfo(email) {\n  const config = {\n    headers: { email: email }\n  };\n  return (dispatch) => {\n    return axios.get(baseURL + 'api/user/single-user', config).then((response) => {\n      if (response.data.status === successStatusCode) {\n        dispatch(setGlobalData({\n          userId: response.data.body.id,\n          userName: response.data.body.userName,\n          userRole: response.data.body.userRole,\n          preferredUserName: response.data.body.preferredUserName\n        }));\n      } else {\n        notification.error({\n          message: 'Error',\n          description: response.data.message,\n          duration\n        });\n      }\n    }).catch((error) => {\n      console.log(error);\n    });\n  };\n}\n\nexport function updateUserInfo(obj, keycloak) {\n  return (dispatch) => {\n    dispatch(setGlobalData({\n      emailId: obj.email,\n      keycloak: keycloak\n    }));\n  };\n}\n\nexport function updateGlobalData(obj) {\n  return (dispatch) => {\n    dispatch(setGlobalData(obj));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}