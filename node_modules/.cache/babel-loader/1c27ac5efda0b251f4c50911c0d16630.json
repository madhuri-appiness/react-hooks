{"ast":null,"code":"import _objectSpread from\"/home/madhuripatil/workspace/hooksapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/home/madhuripatil/workspace/hooksapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _INITIAL_STATE;import{SET_CLAIM_PROJECT_DATA}from'../../constants/actionTypes';var INITIAL_STATE=(_INITIAL_STATE={brands:[],channels:[],countries:[],projects:[],brandIds:[],channelIds:[],subChannelIds:[],requestTypeIds:[],countryIds:[],channelList:[],regions:[],complexities:[],userList:[],regionIds:[],complexityIds:[],userIds:[],groupName:\"\",defaultGroupExist:false,totalClaimGroups:[],targetKeys:[],groupUsers:[],groupId:0,isDefault:false,mode:\"\",filteredResult:[],openAdvanceFilter:false,fromDate:\"\",toDate:\"\",onAdvanceFilter:false,loadedRecords:0,totalRecords:10,unclaimProjects:[],projectDetails:{},projectOwners:[],projectOwnerIds:[]},_defineProperty(_INITIAL_STATE,\"fromDate\",\"\"),_defineProperty(_INITIAL_STATE,\"toDate\",\"\"),_defineProperty(_INITIAL_STATE,\"projectManagerIds\",[]),_defineProperty(_INITIAL_STATE,\"searchKey\",\"\"),_defineProperty(_INITIAL_STATE,\"subCategories\",[]),_defineProperty(_INITIAL_STATE,\"requestTypes\",[]),_defineProperty(_INITIAL_STATE,\"listBPMTasks\",[]),_defineProperty(_INITIAL_STATE,\"unclaimProjListDataLoading\",true),_INITIAL_STATE);export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INITIAL_STATE;var action=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};switch(action.type){case SET_CLAIM_PROJECT_DATA:return _objectSpread(_objectSpread({},state),action.content);default:return state;}});","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/redux/reducers/claimProject.js"],"names":["SET_CLAIM_PROJECT_DATA","INITIAL_STATE","brands","channels","countries","projects","brandIds","channelIds","subChannelIds","requestTypeIds","countryIds","channelList","regions","complexities","userList","regionIds","complexityIds","userIds","groupName","defaultGroupExist","totalClaimGroups","targetKeys","groupUsers","groupId","isDefault","mode","filteredResult","openAdvanceFilter","fromDate","toDate","onAdvanceFilter","loadedRecords","totalRecords","unclaimProjects","projectDetails","projectOwners","projectOwnerIds","state","action","type","content"],"mappings":"4UAAA,OAASA,sBAAT,KAAuC,6BAAvC,CAEA,GAAMC,CAAAA,aAAa,kBACjBC,MAAM,CAAE,EADS,CAEjBC,QAAQ,CAAE,EAFO,CAGjBC,SAAS,CAAE,EAHM,CAIjBC,QAAQ,CAAE,EAJO,CAKjBC,QAAQ,CAAE,EALO,CAMjBC,UAAU,CAAE,EANK,CAOjBC,aAAa,CAAE,EAPE,CAQjBC,cAAc,CAAE,EARC,CASjBC,UAAU,CAAE,EATK,CAUjBC,WAAW,CAAE,EAVI,CAWjBC,OAAO,CAAE,EAXQ,CAYjBC,YAAY,CAAE,EAZG,CAajBC,QAAQ,CAAE,EAbO,CAcjBC,SAAS,CAAE,EAdM,CAejBC,aAAa,CAAE,EAfE,CAgBjBC,OAAO,CAAC,EAhBS,CAiBjBC,SAAS,CAAE,EAjBM,CAkBjBC,iBAAiB,CAAE,KAlBF,CAmBjBC,gBAAgB,CAAE,EAnBD,CAoBjBC,UAAU,CAAE,EApBK,CAqBjBC,UAAU,CAAE,EArBK,CAsBjBC,OAAO,CAAE,CAtBQ,CAuBjBC,SAAS,CAAE,KAvBM,CAwBjBC,IAAI,CAAE,EAxBW,CAyBjBC,cAAc,CAAE,EAzBC,CA0BjBC,iBAAiB,CAAE,KA1BF,CA2BjBC,QAAQ,CAAE,EA3BO,CA4BjBC,MAAM,CAAE,EA5BS,CA6BjBC,eAAe,CAAE,KA7BA,CA8BjBC,aAAa,CAAE,CA9BE,CA+BjBC,YAAY,CAAE,EA/BG,CAgCjBC,eAAe,CAAE,EAhCA,CAiCjBC,cAAc,CAAE,EAjCC,CAkCjBC,aAAa,CAAE,EAlCE,CAmCjBC,eAAe,CAAE,EAnCA,4CAoCP,EApCO,0CAqCT,EArCS,qDAsCE,EAtCF,6CAuCN,EAvCM,iDAwCF,EAxCE,gDAyCH,EAzCG,gDA0CH,EA1CG,8DA2CW,IA3CX,iBAAnB,CA8CA,eAAe,UAAwC,IAAvCC,CAAAA,KAAuC,2DAA/BpC,aAA+B,IAAhBqC,CAAAA,MAAgB,2DAAP,EAAO,CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKvC,CAAAA,sBAAL,CACE,sCACKqC,KADL,EAEKC,MAAM,CAACE,OAFZ,EAIF,QACE,MAAOH,CAAAA,KAAP,CAPJ,CASD,CAVD","sourcesContent":["import { SET_CLAIM_PROJECT_DATA } from '../../constants/actionTypes';\n\nconst INITIAL_STATE = {\n  brands: [],\n  channels: [],\n  countries: [],\n  projects: [],\n  brandIds: [],\n  channelIds: [],\n  subChannelIds: [],\n  requestTypeIds: [],\n  countryIds: [],\n  channelList: [],\n  regions: [],\n  complexities: [],\n  userList: [],\n  regionIds: [],\n  complexityIds: [],\n  userIds:[],\n  groupName: \"\",\n  defaultGroupExist: false,\n  totalClaimGroups: [],\n  targetKeys: [],\n  groupUsers: [],\n  groupId: 0,\n  isDefault: false,\n  mode: \"\",\n  filteredResult: [],\n  openAdvanceFilter: false,\n  fromDate: \"\",\n  toDate: \"\",\n  onAdvanceFilter: false,\n  loadedRecords: 0,\n  totalRecords: 10,\n  unclaimProjects: [],\n  projectDetails: {},\n  projectOwners: [],\n  projectOwnerIds: [],\n  fromDate: \"\",\n  toDate: \"\",\n  projectManagerIds: [],\n  searchKey: \"\",\n  subCategories: [],\n  requestTypes: [],\n  listBPMTasks: [],\n  unclaimProjListDataLoading: true\n};\n\nexport default (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case SET_CLAIM_PROJECT_DATA:\n      return {\n        ...state,\n        ...action.content,\n      };\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}