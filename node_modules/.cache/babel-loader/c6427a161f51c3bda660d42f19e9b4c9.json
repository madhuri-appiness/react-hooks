{"ast":null,"code":"var _jsxFileName = \"/home/madhuripatil/workspace/hooksapp/src/components/secure.js\";\nimport React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nimport axios from \"axios\";\nimport store from \"../utils/store\";\nimport { notification } from 'antd'; // class Secured extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { keycloak: null, authenticated: false };\n//   }\n//   componentDidMount() {\n//     const keycloak = Keycloak('/keycloak.json');\n//     keycloak.init({ onLoad: \"login-required\", checkLoginIframe: false }).success(authenticated => {\n//       if (authenticated) {\n//         if (keycloak.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n//           // store.dispatch(updateUserInfo(kc.tokenParsed, kc));    \n//           this.setState({ keycloak: keycloak, authenticated: authenticated })\n//         } else {\n//           keycloak.logout();\n//         }\n//       } else {\n//         keycloak.login();\n//       }\n//     });\n//     // axios.interceptors.request.use(config => {\n//     //   config.headers = Object.assign({}, config.headers, {\n//     //     'Content-Type': 'application/json',\n//     //     Accept: 'application/json',\n//     //     Authorization: 'Bearer ' + keycloak.token\n//     //   });\n//     //   console.log(keycloak.token)\n//     //   return config;\n//     // });\n//     // axios.interceptors.response.use((response) => {\n//     //   // Do something with response data\n//     //   console.log(response)\n//     //   return response;\n//     // }, (error) => {\n//     //   // Do something with response error\n//     //   if (error.response.status === 401) {\n//     //     keycloak.redirectUri = 'http://localhost:3000';\n//     //     keycloak.logout();\n//     //   }\n//     //   return error;\n//     // });\n//   }\n//   render() {\n//     console.log(this.state.keycloak, this.state.authenticated)\n//     if (this.state.keycloak) {\n//       if (this.state.authenticated) return (\n//         <div>\n//           <p>This is a Keycloak-secured component of your application. You shouldn't be able\n//             to see this unless you've authenticated with Keycloak.</p>\n//         </div>\n//       ); else return (<div>Unable to authenticate!</div>)\n//     }\n//     return (\n//       <div>Initializing Keycloak...</div>\n//     );\n//   }\n// }\n// export default Secured;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.interceptors.request.use(config => {\n  const st = store.getState();\n  config.headers = Object.assign({}, config.headers, {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: 'Bearer ' + kc.token,\n    Provider: 'keycloak',\n    'X-UserId': st.user.userId,\n    'vem-admin': true\n  });\n  return config;\n});\naxios.interceptors.response.use(response => {\n  // Do something with response data\n  return response;\n}, error => {\n  // Do something with response error\n  if (error.response.status === 401) {\n    const NOTIFICATION_DURATION = parseInt(process.env.NOTIFICATION_DURATION);\n    notification.error({\n      message: \"Session timeout\",\n      description: `Your session has been expired. Please refresh the page and try again.`,\n      duration: NOTIFICATION_DURATION\n    });\n    kc.redirectUri = process.env.REDIRECT_URI;\n    kc.logout();\n  }\n\n  return error;\n});\nexport default class Root extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      renderer: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          float: 'left',\n          display: 'block',\n          minHeight: '240px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, void 0)\n    };\n  }\n\n  componentDidMount() {\n    // checkLoginIframe: false --- is required to pass token in incognito. for detailed info https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/oidc/javascript-adapter.adoc\n    kc.init({\n      onLoad: 'check-sso',\n      checkLoginIframe: false\n    }).success(authenticated => {\n      if (authenticated) {\n        if (kc.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n          store.dispatch(updateUserInfo(kc.tokenParsed, kc));\n          store.dispatch(getUserInfo(kc.idTokenParsed.email)).then(() => {\n            // Render the main component into the dom\n            this.setState({\n              renderer: /*#__PURE__*/_jsxDEV(Provider, {\n                store: store,\n                children: this.props.children\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 18\n              }, this),\n              loading: false\n            });\n          });\n        } else {\n          kc.logout();\n        }\n      } else {\n        kc.login();\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Spin, {\n      spinning: this.state.loading,\n      size: \"large\",\n      children: this.state.renderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/madhuripatil/workspace/hooksapp/src/components/secure.js"],"names":["React","Component","Keycloak","axios","store","notification","interceptors","request","use","config","st","getState","headers","Object","assign","Accept","Authorization","kc","token","Provider","user","userId","response","error","status","NOTIFICATION_DURATION","parseInt","process","env","message","description","duration","redirectUri","REDIRECT_URI","logout","Root","PureComponent","constructor","props","state","loading","renderer","float","display","minHeight","componentDidMount","init","onLoad","checkLoginIframe","success","authenticated","realmAccess","roles","indexOf","dispatch","updateUserInfo","tokenParsed","getUserInfo","idTokenParsed","email","then","setState","children","login","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nimport axios from \"axios\";\nimport store from \"../utils/store\";\nimport {notification} from 'antd';\n// class Secured extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = { keycloak: null, authenticated: false };\n//   }\n\n//   componentDidMount() {\n//     const keycloak = Keycloak('/keycloak.json');\n//     keycloak.init({ onLoad: \"login-required\", checkLoginIframe: false }).success(authenticated => {\n//       if (authenticated) {\n//         if (keycloak.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n//           // store.dispatch(updateUserInfo(kc.tokenParsed, kc));    \n//           this.setState({ keycloak: keycloak, authenticated: authenticated })\n//         } else {\n//           keycloak.logout();\n//         }\n//       } else {\n//         keycloak.login();\n//       }\n//     });\n//     // axios.interceptors.request.use(config => {\n//     //   config.headers = Object.assign({}, config.headers, {\n//     //     'Content-Type': 'application/json',\n//     //     Accept: 'application/json',\n//     //     Authorization: 'Bearer ' + keycloak.token\n//     //   });\n//     //   console.log(keycloak.token)\n//     //   return config;\n//     // });\n\n//     // axios.interceptors.response.use((response) => {\n//     //   // Do something with response data\n//     //   console.log(response)\n//     //   return response;\n//     // }, (error) => {\n//     //   // Do something with response error\n//     //   if (error.response.status === 401) {\n//     //     keycloak.redirectUri = 'http://localhost:3000';\n//     //     keycloak.logout();\n//     //   }\n//     //   return error;\n//     // });\n//   }\n\n//   render() {\n//     console.log(this.state.keycloak, this.state.authenticated)\n//     if (this.state.keycloak) {\n//       if (this.state.authenticated) return (\n//         <div>\n//           <p>This is a Keycloak-secured component of your application. You shouldn't be able\n//             to see this unless you've authenticated with Keycloak.</p>\n//         </div>\n//       ); else return (<div>Unable to authenticate!</div>)\n//     }\n//     return (\n//       <div>Initializing Keycloak...</div>\n//     );\n//   }\n// }\n// export default Secured;\n\naxios.interceptors.request.use(config => {\n\tconst st = store.getState();\n\tconfig.headers = Object.assign({}, config.headers, {\n\t\t'Content-Type': 'application/json',\n\t\tAccept: 'application/json',\n\t\tAuthorization: 'Bearer ' + kc.token,\n\t\tProvider: 'keycloak',\n\t\t'X-UserId': st.user.userId,\n\t\t'vem-admin': true\n\t});\n\treturn config;\n});\n\naxios.interceptors.response.use((response) => {\n\t// Do something with response data\n\treturn response;\n}, (error) => {\n\t// Do something with response error\n\tif (error.response.status === 401) {\n\t\tconst NOTIFICATION_DURATION = parseInt(process.env.NOTIFICATION_DURATION);\n\t\tnotification.error({\n\t\t\tmessage: \"Session timeout\",\n\t\t\tdescription: `Your session has been expired. Please refresh the page and try again.`,\n\t\t\tduration: NOTIFICATION_DURATION\n\t\t});\n\t\tkc.redirectUri = process.env.REDIRECT_URI;\n\t\tkc.logout();\n\t}\n\treturn error;\n});\n\nexport default class Root extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloading: true,\n\t\t\trenderer: <span style={{ float: 'left', display: 'block', minHeight: '240px' }}></span>\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n    // checkLoginIframe: false --- is required to pass token in incognito. for detailed info https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/oidc/javascript-adapter.adoc\n    kc.init({onLoad: 'check-sso', checkLoginIframe: false}).success(authenticated => {\n\t\t\tif (authenticated) {\n\t\t\t\tif (kc.realmAccess.roles.indexOf('ROLE_ADMIN') !== -1) {\n\t\t\t\t\tstore.dispatch(updateUserInfo(kc.tokenParsed, kc));\n\t\t\t\t\tstore.dispatch(getUserInfo(kc.idTokenParsed.email)).then(() => {\n\t\t\t\t\t\t// Render the main component into the dom\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\trenderer: <Provider store={store}>\n\t\t\t\t\t\t\t\t{this.props.children}\n\t\t\t\t\t\t\t</Provider>,\n\t\t\t\t\t\t\tloading: false\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tkc.logout();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tkc.login();\n\t\t\t}\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Spin spinning={this.state.loading} size=\"large\">\n\t\t\t\t{this.state.renderer}\n\t\t\t</Spin>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}